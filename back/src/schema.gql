# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type InvoiceFormatElement {
  id: ID!
  order: Int!
  label: String!
  valueType: ElementValueType!
  own: Boolean!
}

enum ElementValueType {
  string
  number
  date
}

type InvoiceFormatDetailElement {
  id: ID!
  order: Int!
  label: String!
  valueType: DetailElementValueType!
  own: Boolean!
}

enum DetailElementValueType {
  string
  number
  date
}

type RequestNotification {
  id: Int!
  userId: ID!
  user: User!
  isRead: IsRead!
  type: NotificationRequestType!
  requestReceiverId: Int!
  requestReceiver: RequestReceiver!
}

enum IsRead {
  read
  unread
}

enum NotificationRequestType {
  requestComing
  requestAccepted
  requestDeclined
}

type RequestReceiver {
  id: Int!
  requestId: Int!
  request: Request!
  receiverId: ID!
  receiver: User!
}

type Judgement {
  id: Int!
  createdAt: DateTime!
  type: JudgementType!
  userId: ID!
  user: User!
  comments: [Comment!]!
  requestId: Int!
  request: Request!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

enum JudgementType {
  approve
  decline
}

type Request {
  id: Int!
  requesterId: ID!
  requester: User!
  invoiceId: String!
  invoice: Invoice!
  status: RequestStatus!
  companyId: Int!
  company: Company!
  createdAt: DateTime!
  comments: [Comment!]!
  requestReceivers: [RequestReceiver!]!
  judgements: [Judgement!]!
}

enum RequestStatus {
  awaiting
  approved
  declined
}

type Comment {
  id: Int!
  content: String!
  createdAt: DateTime!
  invoiceId: String!
  invoice: Invoice!
  userId: ID!
  user: User!
  requestId: Int!
  request: Request
  judgementId: Int
  judgement: Judgement
}

type Construction {
  id: Int!
  code: String!
  createdAt: DateTime!
  name: String!
  companyId: Int!
  company: Company!
}

type InvoiceLogElement {
  elementId: String!
  value: String!
}

type InvoiceLogDetailElement {
  elementId: String!
  value: String!
}

type Invoice {
  id: ID!
  createdAt: DateTime!
  updatedDataAt: DateTime!
  updatedAt: DateTime!
  billingDate: DateTime
  dueDateForPayment: DateTime
  paymentAmount: Int
  constructionId: Int
  construction: Construction
  createdById: String!
  createdBy: User!
  companyId: Int!
  company: Company!
  invoiceFormatLog: InvoiceFormatLog!
  body: [InvoiceLogElement!]!
  detail: [[InvoiceLogDetailElement!]!]!
  status: InvoiceStatus!
}

enum InvoiceStatus {
  inputtingWithSystem
  declinedToSystem
  inputtingFile
  declinedToFile
  awaitingReceipt
  underApproval
  completelyApproved
}

type InvoiceFormatLog {
  id: ID!
  createdAt: DateTime!
  constructionNameId: String
  billingDateId: String
  paymentDeadlineId: String
  paymentAmountId: String
  invoiceFormat: InvoiceFormat!
  elements: [InvoiceFormatElement!]!
  detailElements: [InvoiceFormatDetailElement!]!
}

type InvoiceFormat {
  id: ID!
  name: String!
  company: Company!
}

type Company {
  id: Int!
  createdAt: DateTime!
  name: String!
  phoneNumber: String!
  postalCode: String!
  prefecture: Prefecture
  city: String!
  restAddress: String!
}

enum Prefecture {
  hokkaido
  aomori
  iwate
  miyagi
  akita
  yamagata
  fukushima
  ibaraki
  tochigi
  gunma
  saitama
  chiba
  tokyo
  kanagawa
  niigata
  toyama
  ishikawa
  fukui
  yamanashi
  nagano
  gifu
  shizuoka
  aichi
  mie
  shiga
  kyoto
  osaka
  hyogo
  nara
  wakayama
  tottori
  shimane
  okayama
  hiroshima
  yamaguchi
  tokushima
  kagawa
  ehime
  kochi
  fukuoka
  saga
  nagasaki
  kumamoto
  oita
  miyazaki
  kagoshima
  okinawa
}

type User {
  id: ID!
  email: String!
  familyName: String!
  givenName: String!
  familyNameFurigana: String!
  givenNameFurigana: String!
  isAdmin: Boolean!
  employeeCode: String!
  createdAt: DateTime!
  companyId: Int!
  company: Company!
}

type UnconfirmedUser {
  email: ID!
  familyName: String!
  givenName: String!
  familyNameFurigana: String!
  givenNameFurigana: String!
  isAdmin: Boolean!
  employeeCode: String!
  companyId: Int!
  company: Company!
  createdAt: DateTime!
}

type RequestPair {
  receiverRequest: Request
  requesterRequest: Request
}

input InvoiceLogElementInput {
  elementId: String!
  value: String!
}

input InvoiceLogDetailElementInput {
  elementId: String!
  value: String!
}

type Query {
  unconfirmedUsers: [UnconfirmedUser!]!
  allUsers: [User!]!
  users: [User!]!
  getUnconfirmedUser(email: String!): UnconfirmedUser!
  companies: [Company!]!
  getAnyCompany(id: Int!): Company!
  getCompany: Company!
  invoiceFormats: [InvoiceFormat!]!
  invoices: [Invoice!]!
  getInvoice(id: String!): Invoice!
  notRequestedInvoices: [Invoice!]!
  invoiceFormatLogs: [InvoiceFormatLog!]!
  invoiceFormatElements(logId: String!): [InvoiceFormatElement!]!
  getInvoiceFormatElement(id: String!): InvoiceFormatElement!
  invoiceFormatDetailElements(logId: String!): [InvoiceFormatDetailElement!]!
  getInvoiceFormatDetailElement(id: String!): InvoiceFormatDetailElement!
  comments: [Comment!]!
  requests: [Request!]!
  getRequest(id: Int!): Request!
  requestNotifications: [RequestNotification!]!
  getRequestPair(invoiceId: String!): RequestPair!
  getInvoiceStatusFromUserView(invoiceId: String!): InvoiceStatusFromUserView!
}

enum InvoiceStatusFromUserView {
  declined
  approving
  approvedAwaitingNextApproval
  approvedNextApproved
  handling
  completelyApproved
}

type Mutation {
  addUnconfirmedUser(newUnconfirmedUser: NewUnconfirmedUserInput!): UnconfirmedUser!
  removeUnconfirmedUser(email: String!): Boolean!
  addUser(newUser: NewUserInput!): User!
  addCompany(newCompany: NewCompanyInput!): Company!
  removeCompany(id: Int!): Boolean!
  addInvoiceFormat(newInvoiceFormat: NewInvoiceFormatInput!): InvoiceFormat!
  addInvoice(newInvoice: NewInvoiceInput!): Invoice!
  updateInvoice(input: UpdateInvoiceInput!): Invoice!
  addComment(newComment: NewCommentInput!): Comment!
  removeComment(id: Int!): Boolean!
  addRequest(newRequest: NewRequestInput!): Request!
  addRequestReceiver(newRequestReceiver: NewRequestReceiverInput!): RequestReceiver!
  addRequestNotification(newRequestNotification: NewRequestNotificationInput!): RequestNotification!
  addJudgement(newJudgement: NewJudgementInput!): Judgement!
  receive(input: ReceiveInvoiceInput!): Invoice!
  approve(approveInput: ApproveInvoiceInput!): Request!
  decline(declineInput: DeclineRequestInput!): Boolean!
  handle(handleInput: HandleRequestInput!): Boolean!
}

input NewUnconfirmedUserInput {
  email: String!
  familyName: String!
  givenName: String!
  familyNameFurigana: String!
  givenNameFurigana: String!
  isAdmin: Boolean!
  employeeCode: String!
  companyId: Int!
}

input NewUserInput {
  email: String!
  familyName: String!
  givenName: String!
  familyNameFurigana: String!
  givenNameFurigana: String!
  isAdmin: Boolean!
  employeeCode: String!
  companyId: Int!
}

input NewCompanyInput {
  name: String!
  phoneNumber: String!
  postalCode: String!
  prefecture: Prefecture = null
  city: String!
  restAddress: String!
}

input NewInvoiceFormatInput {
  name: String!
  companyId: Int!
}

input NewInvoiceInput {
  invoiceFormatLogId: String!
  body: [InvoiceLogElementInput!]!
  detail: [[InvoiceLogElementInput!]!]!
}

input UpdateInvoiceInput {
  id: String!
  body: [InvoiceLogElementInput!]!
}

input NewCommentInput {
  content: String!
  invoiceId: String!
  userId: ID!
  requestId: Int!
}

input NewRequestInput {
  requesterId: ID!
  invoiceId: String!
  requestReceiverIds: [ID!]!
  comment: String!
}

input NewRequestReceiverInput {
  receiverId: ID!
  requestId: Int!
}

input NewRequestNotificationInput {
  userId: ID!
  isRead: String!
  type: String!
  requestReceiverId: Int!
}

input NewJudgementInput {
  userId: ID!
  comment: String!
  requestId: Int!
  type: String!
}

input ReceiveInvoiceInput {
  invoiceId: String!
  comment: String!
}

input ApproveInvoiceInput {
  requestId: Float!
  receiverIds: [String!]!
  comment: String!
}

input DeclineRequestInput {
  requestId: Float!
  comment: String!
}

input HandleRequestInput {
  requestId: Float!
  comment: String!
}
