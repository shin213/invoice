# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type InvoiceFormatElement {
  id: ID!
  order: Int!
  label: String!
  valueType: ElementValueType!

  """`true`: ゼネコンが入力。, `false`: 下請けが入力。"""
  own: Boolean!
}

enum ElementValueType {
  string
  number
  date
}

type InvoiceFormatDetailElement {
  id: ID!
  order: Int!
  label: String!
  valueType: DetailElementValueType!

  """`true`: ゼネコンが入力。, `false`: 下請けが入力。"""
  own: Boolean!
}

enum DetailElementValueType {
  string
  number
  date
}

type RequestNotification {
  id: Int!
  userId: ID!
  user: User!
  isRead: IsRead!
  type: NotificationRequestType!
  requestReceiverId: Int!
  requestReceiver: RequestReceiver!
}

enum IsRead {
  read
  unread
}

enum NotificationRequestType {
  requestComing
  requestAccepted
  requestDeclined
}

type RequestReceiver {
  id: Int!
  requestId: Int!
  request: Request!
  receiverId: ID!
  receiver: User!
}

type Judgement {
  id: Int!
  createdAt: DateTime!
  type: JudgementType!
  userId: ID!
  user: User!
  comments: [Comment!]!
  requestId: Int!
  request: Request!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

enum JudgementType {
  approve
  decline
  reapply
}

type Request {
  id: Int!
  requesterId: ID!
  requester: User!
  invoiceId: String!
  invoice: Invoice!
  status: RequestStatus!
  companyId: Int!
  company: Company!
  createdAt: DateTime!
  comments: [Comment!]!
  requestReceivers: [RequestReceiver!]!
  judgements: [Judgement!]!
}

enum RequestStatus {
  awaiting
  approved
  declined
}

type Comment {
  id: Int!
  content: String!
  createdAt: DateTime!
  invoiceId: String!
  invoice: Invoice!
  userId: ID!
  user: User!
  requestId: Int!
  request: Request
  judgementId: Int
  judgement: Judgement
}

type Construction {
  id: Int!
  code: String!
  createdAt: DateTime!
  name: String!
  companyId: Int!
  company: Company!
}

type InvoiceLogElement {
  elementId: String!
  value: String!
}

type InvoiceLogDetailElement {
  elementId: String!
  value: String!
}

type RequestPairStatus {
  receiverRequest: Request
  requesterRequest: Request
  invoiceStatusFromUserView: InvoiceStatusFromUserView!
}

"""ユーザー視点での承認の状態"""
enum InvoiceStatusFromUserView {
  """自分が申請者で差し戻され要対応な状態"""
  declined

  """承認担当中・未承認"""
  approving

  """受領or承認済み・次の承認待ち"""
  approvedAwaitingNextApproval

  """受領or承認済み・次の承認も済み"""
  approvedNextApproved

  """主たる関係がない"""
  unrelated

  """自分が差し戻した後の対応待ち"""
  handling

  """全員に承認された"""
  completelyApproved
}

type InvoiceFile {
  pathName: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  invoiceId: String!
  createdById: String
  createdBy: User
}

type Invoice {
  id: ID!
  createdAt: DateTime!
  updatedDataAt: DateTime!
  updatedAt: DateTime!
  billingDate: DateTime
  dueDateForPayment: DateTime
  paymentAmount: Int
  constructionId: Int
  construction: Construction
  createdById: String!
  createdBy: User!
  companyId: Int!
  company: Company!
  invoiceFormatLog: InvoiceFormatLog!
  body: [InvoiceLogElement!]!
  detail: [[InvoiceLogDetailElement!]!]!
  status: InvoiceStatus!
  requests: [Request!]!
  requestPairStatus: RequestPairStatus!
}

"""請求書の状態"""
enum InvoiceStatus {
  """システムで入力中"""
  inputtingWithSystem

  """システムの入力結果が差し戻された"""
  declinedToSystem

  """ファイルアップロード中"""
  inputtingFile

  """アップロード結果が差し戻された"""
  declinedToFile

  """受領待ち"""
  awaitingReceipt

  """承認作業中"""
  underApproval

  """承認完了"""
  completelyApproved
}

type InvoiceFormatLog {
  id: ID!
  createdAt: DateTime!
  constructionNameId: String
  billingDateId: String
  paymentDeadlineId: String
  paymentAmountId: String
  invoiceFormat: InvoiceFormat!
  elements: [InvoiceFormatElement!]!
  detailElements: [InvoiceFormatDetailElement!]!
}

type InvoiceFormat {
  id: ID!
  name: String!
  company: Company!
}

type Company {
  id: Int!
  createdAt: DateTime!
  name: String!
  phoneNumber: String!
  postalCode: String!
  prefecture: Prefecture
  city: String!
  restAddress: String!
}

enum Prefecture {
  hokkaido
  aomori
  iwate
  miyagi
  akita
  yamagata
  fukushima
  ibaraki
  tochigi
  gunma
  saitama
  chiba
  tokyo
  kanagawa
  niigata
  toyama
  ishikawa
  fukui
  yamanashi
  nagano
  gifu
  shizuoka
  aichi
  mie
  shiga
  kyoto
  osaka
  hyogo
  nara
  wakayama
  tottori
  shimane
  okayama
  hiroshima
  yamaguchi
  tokushima
  kagawa
  ehime
  kochi
  fukuoka
  saga
  nagasaki
  kumamoto
  oita
  miyazaki
  kagoshima
  okinawa
}

type User {
  id: ID!
  email: String!
  familyName: String!
  givenName: String!
  familyNameFurigana: String!
  givenNameFurigana: String!
  isAdmin: Boolean!
  employeeCode: String!
  createdAt: DateTime!
  companyId: Int!
  company: Company!
}

type UnconfirmedUser {
  email: ID!
  familyName: String!
  givenName: String!
  familyNameFurigana: String!
  givenNameFurigana: String!
  isAdmin: Boolean!
  employeeCode: String!
  companyId: Int!
  company: Company!
  createdAt: DateTime!
}

input InvoiceLogElementInput {
  elementId: String!
  value: String!
}

input InvoiceLogDetailElementInput {
  elementId: String!
  value: String!
}

type Query {
  adminUnconfirmedUsers: [UnconfirmedUser!]!
  unconfirmedUsers: [UnconfirmedUser!]!
  adminUsers: [User!]!
  users: [User!]!
  currentUser: User!
  unconfirmedUser(email: String!): UnconfirmedUser!
  adminCompanies: [Company!]!
  adminCompany(id: Int!): Company!
  company: Company!
  invoiceFormats: [InvoiceFormat!]!
  invoiceFormatLogs: [InvoiceFormatLog!]!
  invoiceFormatElements(logId: String!): [InvoiceFormatElement!]!
  invoiceFormatElement(id: String!): InvoiceFormatElement!
  requests: [Request!]!
  request(id: Int!): Request!
  requestNotifications: [RequestNotification!]!
  constructions: [Construction!]!
  invoices: [Invoice!]!
  invoice(id: String!): Invoice!
  invoicesByStatus(status: InvoiceStatus!): [Invoice!]!
}

type Mutation {
  adminAddUnconfirmedUser(newUnconfirmedUser: AdminNewUnconfirmedUserInput!): UnconfirmedUser!
  adminRemoveUnconfirmedUser(email: String!): Boolean!
  addUnconfirmedUser(newUnconfirmedUser: NewUnconfirmedUserInput!): UnconfirmedUser!
  updateUnconfirmedUser(updateUnconfirmedUser: UpdateUnconfirmedUserInput!): UnconfirmedUser!
  adminUpdateUnconfirmedUser(updateUnconfirmedUser: UpdateUnconfirmedUserInput!): UnconfirmedUser!
  addUser(newUser: NewUserInput!): User!
  adminAddCompany(newCompany: NewCompanyInput!): Company!
  adminRemoveCompany(id: Int!): Boolean!
  addInvoiceFormat(newInvoiceFormat: NewInvoiceFormatInput!): InvoiceFormat!
  addComment(newComment: NewCommentInput!): Comment!
  addRequest(newRequest: NewRequestInput!): Request!
  addRequestReceiver(newRequestReceiver: NewRequestReceiverInput!): RequestReceiver!
  addRequestNotification(newRequestNotification: NewRequestNotificationInput!): RequestNotification!
  addConstruction(newConstruction: NewConstructionInput!): Construction!

  """請求書を送信する"""
  sendInvoice(input: SendInvoiceInput!): Invoice!

  """受領する"""
  receiveInvoice(input: ReceiveInvoiceInput!): Invoice!

  """受領を差し戻す"""
  declineInvoiceToInput(input: DeclineInvoiceInput!): Invoice!

  """承認リクエストを承認する"""
  approveRequest(input: ApproveRequestInput!): Request!

  """承認リクエストを差し戻す"""
  declineRequest(input: DeclineRequestInput!): Boolean!

  """承認を再申請する"""
  reapplyRequest(input: ReapplyRequestInput!): Boolean!

  """最終承認する"""
  completeInvoice(input: CompleteInvoiceInput!): Invoice!
  addInvoice(newInvoice: NewInvoiceInput!): Invoice!
  updateInvoice(input: UpdateInvoiceInput!): Invoice!
  uploadInvoiceFile(invoiceId: String!, file: Upload!): InvoiceFile!
}

input AdminNewUnconfirmedUserInput {
  email: String!
  familyName: String!
  givenName: String!
  familyNameFurigana: String!
  givenNameFurigana: String!
  isAdmin: Boolean!
  employeeCode: String!
  companyId: Int!
}

input NewUnconfirmedUserInput {
  email: String!
  familyName: String!
  givenName: String!
  familyNameFurigana: String!
  givenNameFurigana: String!
  isAdmin: Boolean!
  employeeCode: String!
}

input UpdateUnconfirmedUserInput {
  email: String!
  familyName: String!
  givenName: String!
  familyNameFurigana: String!
  givenNameFurigana: String!
  isAdmin: Boolean!
  employeeCode: String!
}

input NewUserInput {
  email: String!
  familyName: String!
  givenName: String!
  familyNameFurigana: String!
  givenNameFurigana: String!
  isAdmin: Boolean!
  employeeCode: String!
  companyId: Int!
}

input NewCompanyInput {
  name: String!
  phoneNumber: String!
  postalCode: String!
  prefecture: Prefecture = null
  city: String!
  restAddress: String!
}

input NewInvoiceFormatInput {
  name: String!
  companyId: Int!
}

input NewCommentInput {
  content: String!
  invoiceId: String!
  userId: ID!
  requestId: Int!
}

input NewRequestInput {
  requesterId: ID!
  invoiceId: String!
  requestReceiverIds: [ID!]!
  comment: String!
}

input NewRequestReceiverInput {
  receiverId: ID!
  requestId: Int!
}

input NewRequestNotificationInput {
  userId: ID!
  isRead: String!
  type: String!
  requestReceiverId: Int!
}

input NewConstructionInput {
  name: String!
  code: String!
}

input SendInvoiceInput {
  invoiceId: String!
  comment: String!
}

input ReceiveInvoiceInput {
  invoiceId: String!
  nextReceiverIds: [String!]!
  comment: String!
}

input DeclineInvoiceInput {
  invoiceId: String!
  comment: String!
}

input ApproveRequestInput {
  requestId: Float!
  receiverIds: [String!]!
  comment: String!
}

input DeclineRequestInput {
  requestId: Float!
  comment: String!
}

input ReapplyRequestInput {
  requestId: Float!
  comment: String!
}

input CompleteInvoiceInput {
  requestId: Float!
}

input NewInvoiceInput {
  invoiceFormatLogId: String!
  body: [InvoiceLogElementInput!]!
  detail: [[InvoiceLogElementInput!]!]!
}

input UpdateInvoiceInput {
  id: String!
  body: [InvoiceLogElementInput!]!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload